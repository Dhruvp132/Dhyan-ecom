generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String         @unique
  password  String
  isAdmin   Boolean        @default(false)
  products  Product[]
  cart      Cart[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  addresses OrderAddress[]
  orders    Order[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  mainImage   String
  quantity    Int
  otherImages String[]
  sizes       String[]
  colors      String[]
  tags        String[]    @default([])
  categories  Category[]
  cart        Cart[]
  orderItems  OrderItem[]
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  productId String  @db.ObjectId
  products  Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  color     String?
  size      String?
}

model OrderAddress {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  address   String
  city      String
  state     String
  zip       String
  order     Order[]
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String       @unique
  status        OrderStatus  @default(PENDING)
  paymentMethod String       @default("Razorpay")
  totalAmount   Float
  usersId       String       @db.ObjectId
  user          User         @relation(fields: [usersId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  addressId     String       @db.ObjectId
  address       OrderAddress @relation(fields: [addressId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  color     String?
  size      String?
  createdAt DateTime? @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model SearchSuggestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  term       String   @unique
  popularity Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
